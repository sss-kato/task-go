// Code generated by MockGen. DO NOT EDIT.
// Source: ./user_reopsitory.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"
	"task-go/dto"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepositoryIF is a mock of UserRepositoryIF interface.
type MockUserRepositoryIF struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryIFMockRecorder
}

// MockUserRepositoryIFMockRecorder is the mock recorder for MockUserRepositoryIF.
type MockUserRepositoryIFMockRecorder struct {
	mock *MockUserRepositoryIF
}

// NewMockUserRepositoryIF creates a new mock instance.
func NewMockUserRepositoryIF(ctrl *gomock.Controller) *MockUserRepositoryIF {
	mock := &MockUserRepositoryIF{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryIFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryIF) EXPECT() *MockUserRepositoryIFMockRecorder {
	return m.recorder
}

// RegistUser mocks base method.
func (m *MockUserRepositoryIF) RegistUser(user *dto.UserDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegistUser indicates an expected call of RegistUser.
func (mr *MockUserRepositoryIFMockRecorder) RegistUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistUser", reflect.TypeOf((*MockUserRepositoryIF)(nil).RegistUser), user)
}

// GetUser mocks base method.
func (m *MockUserRepositoryIF) GetUser(user *dto.UserDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserRepositoryIFMockRecorder) GetUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRepositoryIF)(nil).GetUser), user)
}
