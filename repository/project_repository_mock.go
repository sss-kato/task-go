// Code generated by MockGen. DO NOT EDIT.
// Source: project_repository.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"
	dto "task-go/dto"

	gomock "github.com/golang/mock/gomock"
)

// MockProjectRepositoryIF is a mock of ProjectRepositoryIF interface.
type MockProjectRepositoryIF struct {
	ctrl     *gomock.Controller
	recorder *MockProjectRepositoryIFMockRecorder
}

// MockProjectRepositoryIFMockRecorder is the mock recorder for MockProjectRepositoryIF.
type MockProjectRepositoryIFMockRecorder struct {
	mock *MockProjectRepositoryIF
}

// NewMockProjectRepositoryIF creates a new mock instance.
func NewMockProjectRepositoryIF(ctrl *gomock.Controller) *MockProjectRepositoryIF {
	mock := &MockProjectRepositoryIF{ctrl: ctrl}
	mock.recorder = &MockProjectRepositoryIFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectRepositoryIF) EXPECT() *MockProjectRepositoryIFMockRecorder {
	return m.recorder
}

// CreateProject mocks base method.
func (m *MockProjectRepositoryIF) CreateProject(pd dto.ProjectDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", pd)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockProjectRepositoryIFMockRecorder) CreateProject(pd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockProjectRepositoryIF)(nil).CreateProject), pd)
}
