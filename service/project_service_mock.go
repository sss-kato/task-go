// Code generated by MockGen. DO NOT EDIT.
// Source: ./project_service.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"
	domain "task-go/domain"

	gomock "github.com/golang/mock/gomock"
)

// MockProjectServiceIF is a mock of ProjectServiceIF interface.
type MockProjectServiceIF struct {
	ctrl     *gomock.Controller
	recorder *MockProjectServiceIFMockRecorder
}

// MockProjectServiceIFMockRecorder is the mock recorder for MockProjectServiceIF.
type MockProjectServiceIFMockRecorder struct {
	mock *MockProjectServiceIF
}

// NewMockProjectServiceIF creates a new mock instance.
func NewMockProjectServiceIF(ctrl *gomock.Controller) *MockProjectServiceIF {
	mock := &MockProjectServiceIF{ctrl: ctrl}
	mock.recorder = &MockProjectServiceIFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectServiceIF) EXPECT() *MockProjectServiceIFMockRecorder {
	return m.recorder
}

// CreateProject mocks base method.
func (m *MockProjectServiceIF) CreateProject(pr domain.ProjectIF) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", pr)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockProjectServiceIFMockRecorder) CreateProject(pr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockProjectServiceIF)(nil).CreateProject), pr)
}
