// Code generated by MockGen. DO NOT EDIT.
// Source: ./user_service.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"
	"task-go/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockUserServiceIF is a mock of UserServiceIF interface.
type MockUserServiceIF struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceIFMockRecorder
}

// MockUserServiceIFMockRecorder is the mock recorder for MockUserServiceIF.
type MockUserServiceIFMockRecorder struct {
	mock *MockUserServiceIF
}

// NewMockUserServiceIF creates a new mock instance.
func NewMockUserServiceIF(ctrl *gomock.Controller) *MockUserServiceIF {
	mock := &MockUserServiceIF{ctrl: ctrl}
	mock.recorder = &MockUserServiceIFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceIF) EXPECT() *MockUserServiceIFMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockUserServiceIF) Login(user domain.UserIF) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceIFMockRecorder) Login(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserServiceIF)(nil).Login), user)
}

// Signup mocks base method.
func (m *MockUserServiceIF) Signup(user domain.UserIF) (domain.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", user)
	ret0, _ := ret[0].(domain.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Signup indicates an expected call of Signup.
func (mr *MockUserServiceIFMockRecorder) Signup(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockUserServiceIF)(nil).Signup), user)
}
